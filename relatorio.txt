\documentclass[a4paper]{article}

\usepackage[brazil]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}

\title{Pinball}

\author{Ronaldo Yang \& Yoshio Mori
  \\
  \small 9999999 \& 6432393
}

\begin{document}
\maketitle
\newpage
\section{Estrutura}
\subsection{Função Principal (main - pinball.js)}
É a primeira função a ser chamada pelo cliente. Ela carrega o canvas, a interface do webgl, o scene e é reponsável por fazer a integração entre esses sistemas.

A rotina dela consiste em carregar os buffers, inicializar o shader, criar os objetos. Após isso ele entra em loop de atualização dos objetos e renderização.

\subsection{Classe principal (Scene - scene.js)}
Essa classe contém as informações das imagens, de como desenhá-las na tela e das posições, tamanhos e orientações de cada peça.

\subsubsection{Atributos da Classe}
\begin{description}
\item[gl] Interface gráfica.
\subitem[shaders] Conjunto de Object shader.
\item[images] Conjunto de Object image.
\item[pieces] Conjunto de Object piece.
\item[camera] Conjunto de Object camera.
\item[ready] Boolean informa true se todos os Object image foram carregados.
\end{description}
\subsubsection{Principais Métodos da Classe}
\begin{description}
\item[createShaders] Inicia um novo Object shader obtendo a posição, normal e textura de cada variável no shader.
\item[createImage] Faz a leitura do arquivo Obj, coletando os vértices para serem armazenados num buffer da gpu. Com isso ele instancia um Object image.
\item[isReady] Para cada Object image instanciado, verifica se a imagem já está pronta. Dessa forma é possível determinar quando começar as iterações do jogo.
\end{description}
\subsection{Object image}
Esse objeto contém os endereços dos buffers de posições, normais, textura e indices de cada um dos vértices, assim como o shader reponsável pela renderização.

E seu único método, draw, é chamado pelo Object piece com os parâmetros das matrizes de projeção vértice e modelo. Com esses parâmetros inicia-se o processo de renderização.

\subsection{Object piece}
Cada Object piece está associado à um Object image. Ela contém as informações de posição, tamanho e orientação.

No processo de construção as informações de posição, tamanho e orientação são usados para gerar a matriz de modelo, e sempre que esse atributos são atualizados a rotinha se repete.

\subsubsection{Principais Métodos}
\begin{description}
\item[isReady] Verifica se a imagem foi inicializada.
\item[show] É chamada pela câmera com os parâmetros das matrizes de projeção e visualização. O método envia esses parâmetros para o Object image associado, assim como sua matriz de modelo.
\end{description}
\subsection{Object camera}
Seus atributos são posição, ponto da direção que a câmera está voltado e vetor que indica o cima da camera.

Assim como no object piece, aos ser instanciado as matrizes de projeção e visualização são calculadas e sempre que seus atributos são atualizados novas matrizes são geradas.

Seu método show é chamado pelo scene, que por sua vez mostra a imagem de cada peça.
\end{document}
